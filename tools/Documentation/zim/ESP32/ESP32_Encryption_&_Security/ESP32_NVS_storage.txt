Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-26T21:20:44+02:00

====== ESP32 NVS storage ======
Created четвъртък 26 декември 2019

=== 1 Non encrypted access: ===

{{{code: lang="c" linenumbers="True"
    // Initialize NVS
    esp_err_t err = nvs_flash_init();
    if (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        // NVS partition was truncated and needs to be erased
        // Retry nvs_flash_init
        ESP_ERROR_CHECK(nvs_flash_erase());
        err = nvs_flash_init();
    }
    ESP_ERROR_CHECK( err );

    // Open
    printf("\n");
    printf("Opening Non-Volatile Storage (NVS) handle... ");
    nvs_handle_t my_handle;
    err = nvs_open("storage", NVS_READWRITE, &my_handle);
    if (err != ESP_OK) {
        printf("Error (%s) opening NVS handle!\n", esp_err_to_name(err));
    } else {
        printf("Done\n");

        // Read
        printf("Reading restart counter from NVS ... ");
        int32_t restart_counter = 0; // value will default to 0, if not set yet in NVS
        err = nvs_get_i32(my_handle, "restart_counter", &restart_counter);
        switch (err) {
            case ESP_OK:
                p 2 Non encrypted access:rintf("Done\n");
                printf("Restart counter = %d\n", restart_counter);
                break;
            case ESP_ERR_NVS_NOT_FOUND:
                printf("The value is not initialized yet!\n");
                break;
            default :
                printf("Error (%s) reading!\n", esp_err_to_name(err));
        }

        // Write
        printf("Updating restart counter in NVS ... ");
        restart_counter++;
        err = nvs_set_i32(my_handle, "restart_counter", restart_counter);
        printf((err != ESP_OK) ? "Failed!\n" : "Done\n");

        // Commit written value.
        // After settiesp_partition_findng any values, nvs_commit() must be called to ensure changes are written
        // to flash storage. Implementations may write to storage at other times,
        // but this is not guaranteed.
        printf("Committing updates in NVS ... ");
        err = nvs_commit(my_handle);
        printf((err != ESP_OK) ? "Failed!\n" : "Done\n");

        // Close
        nvs_close(my_handle);
    }
}}}


===== 2 Encrypted access: =====
{{{code: lang="c" linenumbers="True"
	ESP_LOGI(TAG, "NVS Encrypted Flash init");
    // Initialize NVS
    rc = nvs_flash_secure_init(&nvs_sec_cfg);
    if (rc == ESP_ERR_NVS_NO_FREE_PAGES || rc == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        // NVS partition was truncated and needs to be erased
        // Retry nvs_flash_init
    	ESP_LOGI(TAG, "NVS Flash erase");
        ESP_ERROR_CHECK(nvs_flash_erase());
        rc = nvs_flash_secure_init(&nvs_sec_cfg);
    }
    ESP_ERROR_CHECK( rc );
    
    /*After that access is the same as in non-encrypted api
		nvs_open(....);
		nvs_get_i32(...);
		nvs_set_i32(...);
		nvs_commit(...);
		nvs_close(...);
	*/
}}}


===== 3 My tests =====
Just for testing of NVS features i want to have a possibility to enable NVS encription without enabling of FLASH ENCRYPTION and Secure boot faatures. 
This is possible because NVS doesn't use internal hardware encryption keys. NVS use a externaly provided encription keys, saved in some flash storage partition. To protect NVS keys , this partition, should be encrypted with  FLASH ENCRYPTION. 
For my tests I want to have a NVS encryptions, but i don't won't to enable FLASH ENCRYPTION, becouse it requires generation and fuse of internal hardware keys, and after this procedure i **can't disable FLASH ENCRIPTION at all.** 
My test use case will be enabling of NVS encritpion, but NVS encryption keys, which i will use will be stored nin not encrypted partition. **THIS IS ONLY FOR TESTING NVS PURPOSE!**

This use case is possible if in Kconfig file located in //nvs_flash// component to remove  dependency from flash encryption - just remove this line:
	 **depends on SECURE_FLASH_ENC_ENABLED**
To do this without touching the original Kconfig file of //nvs_flash //component i just place in Kconfig  of my test application i override nvs_flash menu configuration in this way.

 **Add to my test Kconfig** 
{{{code: lang="sh" linenumbers="True"
menu "NVS"

    config NVS_ENCRYPTION
        bool "Enable NVS encryption"
        default y
        help
            This option enables encryption for NVS. When enabled, AES-XTS is used to encrypt
            the complete NVS data, except the page headers. It requires XTS encryption keys
            to be stored in an encrypted partition. This means enabling flash encryption is
            a pre-requisite for this feature.
endmenu
}}}

This enable NVS encription and remove FLASH ENCRIPTION dependencies.

Test Flow TODO:

Use [[https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/storage/nvs_partition_gen.html|NVS Partition Generator Utility]]

1 Create encrypted NVS partition
{{{code: lang="sh" linenumbers="True"
python nvs_partition_gen.py  encrypt ./nvs_partition_test.csv nvs_partition_test_encr.bin 0x6000 --keygen --keyfile nvs_partition_keys.bin
}}}


2 Flash on keys on board in partition "phy_init"
{{{code: lang="sh" linenumbers="True"
# For keys storage I use partition: -  phy_init, data, phy,     0xf000,  0x1000,
esptool.py -p /dev/ttyUSB0 -b 460800 read_flash 0xf000 0x1000 phy_init_backup.bin
esptool.py erase_region 0xf000 0x1000
esptool.py --port /dev/ttyUSB0 write_flash 0xf000 keys/nvs_partition_keys.bin

#Write NVS partition
esptool.py erase_region 0x9000 0x6000
esptool.py --port /dev/ttyUSB0 write_flash 0x9000 keys/nvs_partition_keys.bin
}}}


3 Reset and check that what is prepared is available on NVS
4 Check that the NVS keys are correct as generated with PC tools.



